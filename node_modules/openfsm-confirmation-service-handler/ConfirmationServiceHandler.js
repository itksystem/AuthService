// Обработчик взаимодействия с ConfirmationService
const fetch = require('node-fetch');
const CommonFunctionHelper = require("openfsm-common-functions");
const logger      = require('openfsm-logger-handler');
const commonFunction = new CommonFunctionHelper();
require('dotenv').config({ path: '.env-auth-service' });

class ConfirmationServiceHandler {
    constructor() {}

    /**
     * Метод для получения идентификатора запроса  от ConfirmationService
     * @returns {Object} - Объект с результатом
     */
    async get2PARequestId(req, res) {
        try {            
            const response = await fetch(process.env.CONFIRMATION_2PA_QUESTION_REQUEST_ID_URL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`,
                },
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`get2PARequestId successfully.`);
                return { success: true, data };
            } else {
                console.log(`get2PARequestId failed.`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`get2PARequestId failed.`);
            return { success: false, error: error.message };
        }
    }

    /**
     * Метод обновления идентификатора запроса от ConfirmationService
     * @returns {Object} - Объект с результатом
     */
    async update2PARequestId(req, res) {
        try {
            const response = await fetch(process.env.CONFIRMATION_2PA_REQUEST_ID_URL, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`,
                },
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`Get profile successfully.`);
                return { success: true, data };
            } else {
                console.log(`Get profile failed.`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`Get profile failed.`);
            return { success: false, error: error.message };
        }
    }

}

module.exports = ConfirmationServiceHandler;
