// Общая библиотека Auth
/* SQL Queries */
const SQL = {
  USER: {
    ASSIGN_ROLE: `INSERT INTO pa_auth_service.user_roles (user_id, role_id) VALUES($1, $2)`,
    CREATE: `INSERT INTO pa_auth_service.users (email, password, verification_code) VALUES ($1, $2, $3) RETURNING id;`,
    TELEGRAM_CREATE: `INSERT INTO pa_auth_service.users (telegram_id, password, verification_code) VALUES ($1, $2, $3) RETURNING id;`,
    FIND_BY_EMAIL: `SELECT * FROM pa_auth_service.users WHERE email = $1`,
    FIND_BY_ID: `SELECT * FROM pa_auth_service.users WHERE id = $1`,
    FIND_BY_TELEGRAM_ID: `SELECT * FROM pa_auth_service.users WHERE telegram_id = $1`,
    UPDATE_BY_ID: `UPDATE pa_auth_service.users SET name = $1, email = $2 WHERE id = $3`,    
    GET_ME : `SELECT email as login, confirmed FROM pa_auth_service.users WHERE id = $1`,
    GET_CONFIRMED : `SELECT confirmed  FROM pa_auth_service.users WHERE id = $1`,
    SET_CONFIRMED : `UPDATE pa_auth_service.users SET confirmed=NOW() WHERE id = $1`,
    SET_UNCONFIRMED : `UPDATE pa_auth_service.users SET confirmed=NULL WHERE id = $1`,
    GET_VERIFICATION_CODE : `SELECT verification_code  FROM pa_auth_service.users WHERE id = $1`,
    SET_VERIFICATION_CODE : `UPDATE pa_auth_service.users SET verification_code=$1  WHERE id = $2`,    
    GET_ROLES : `SELECT DISTINCT(r.name) AS roles, r.description
      FROM pa_auth_service.users u
      JOIN pa_auth_service.user_roles ur ON u.id = ur.user_id
      JOIN pa_auth_service.roles r ON r.id = ur.role_id
      WHERE u.id = $1 and u.blocked is null`,    
    GET_PERMISSIONS : ` SELECT DISTINCT(p.name) AS permissions, p.description
        FROM pa_auth_service.users u
        JOIN pa_auth_service.user_roles ur ON u.id = ur.user_id
        JOIN pa_auth_service.role_permissions rp ON ur.role_id = rp.role_id
        JOIN pa_auth_service.permissions p ON rp.permission_id = p.id
        WHERE u.id = $1 and u.blocked is null`,    
    }
};

const MESSAGES = {
   RU : {
    USER_NOT_FOUND : 'Пользователь не найден',
    EMAIL_AND_PASSWORD_REQUIRED : 'Email и пароль обязательны.',
    USER_ALREADY_EXISTS: 'Такой пользователь уже существует.',
    PASSWORD_HASHING_ERROR: 'Ошибка при хэшировании пароля.',
    USER_CREATION_ERROR: 'Ошибка при создании пользователя.',
    USER_RIGHTS_MISSING: 'Доступ запрещен: права пользователя отсутствуют',
    USER_ID_MISSING: 'Идентификатор пользователя отсутствует.',
    TOKEN_EXTRACTION_ERROR: 'Ошибка при извлечении токена:',
    USER_REGISTERED_SUCCESSFULLY: 'Пользователь зарегистрирован успешно',
    USER_LOGOUT : 'Пользователь вышел из сессии',
    TOKEN_VERIFICATION_FAILED: 'Ошибка проверки токена',
    VERIFICATION_CODE_RETRIEVAL_FAILED: 'Ошибка получения кода верификации',
    ATTEMPTS_EXHAUSTED: 'Количество попыток исчерпано',
    OPERATION_FAILED: 'Возникла ошибка при выполнении операции',
    REGISTRATION_CONFIRMED: 'Регистрация подтверждена',
    INVALID_CODE: 'Код неверен',
    REGISTRATION_ALREADY_CONFIRMED: 'Регистрация уже подтверждена',
    CODE_CHANGED_ENTER_NEW: 'Код был изменен. Введите новый код.',
    NO_AUTH_MSG : 'Токен недействителен. Необходима авторизация в системе.',
   }
}


/* Экспорт */
module.exports = {
  SQL, MESSAGES
};
